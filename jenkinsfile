pipeline {
    agent { label 'test-fazil' }
    
    environment {
        APP_NAME = "register-app-pipeline"
        RELEASE = "1.0.0"
        DOCKER_USER = "fazilkunju"
        DOCKER_PASS = "dockerhub"
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }

    stages {
        stage("Cleanup Workspace") {
            steps { 
                cleanWs() 
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'master',
                    credentialsId: 'github',
                    url: 'https://github.com/faasilkunju/faasilkunju.git'
            }
        }

        stage("Setup Environment") {
            steps {
                script {
                    sh '''
                        # Set JAVA_HOME for this pipeline
                        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk
                        export PATH=$JAVA_HOME/bin:$PATH
                        echo "JAVA_HOME set to: $JAVA_HOME"
                        
                        # Verify tools
                        echo "=== Verifying Tools ==="
                        java -version
                        mvn --version || echo "Maven not working - but continuing"
                        node --version
                        npm --version
                    '''
                }
            }
        }

        stage("Verify Environment") {
            steps {
                script {
                    // Verify NodeJS is installed
                    def nodeVersion = sh(script: 'node --version', returnStdout: true).trim()
                    def npmVersion = sh(script: 'npm --version', returnStdout: true).trim()
                    echo "NodeJS version: ${nodeVersion}"
                    echo "NPM version: ${npmVersion}"
                    
                    // Verify we're in the right directory
                    sh 'pwd && ls -la'
                }
            }
        }

        stage("Install Dependencies") {
            steps { 
                sh 'npm install' 
            }
        }

        stage("Install Forever") {
            steps {
                sh 'npm install -g forever'
            }
        }

        stage("Run Tests") {
            steps { 
                sh 'PORT=3001 npm test'
            }
        }

        stage("Build Application") {
            steps { 
                sh 'npm run build || echo "No build script defined - continuing"' 
            }
        }

        stage("SonarQube Analysis"){
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'Sonarqube') { 
                        sh '''
                            # Set JAVA_HOME
                            export JAVA_HOME=/usr/lib/jvm/java-21-openjdk
                            export PATH=$JAVA_HOME/bin:$PATH
                            
                            echo "üì• Setting up SonarScanner..."
                            if ! command -v sonar-scanner &> /dev/null; then
                                echo "Installing SonarScanner..."
                                wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
                                unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
                                export PATH=$PWD/sonar-scanner-4.8.0.2856-linux/bin:$PATH
                                echo "‚úÖ SonarScanner installed successfully"
                            else
                                echo "‚úÖ SonarScanner is already installed"
                            fi
                            
                            # Verify SonarScanner
                            echo "SonarScanner version:"
                            sonar-scanner --version
                            
                            echo "üöÄ Starting SonarQube analysis..."
                            sonar-scanner \\
                                -Dsonar.projectKey=register-app \\
                                -Dsonar.sources=. \\
                                -Dsonar.host.url=$SONAR_HOST_URL \\
                                -Dsonar.login=$SONAR_AUTH_TOKEN \\
                                -Dsonar.coverage.exclusions=**/node_modules/**,**/tests/** \\
                                -Dsonar.exclusions=**/node_modules/**,**/.*/** \\
                                -Dsonar.projectName="Register App" \\
                                -Dsonar.projectVersion=1.0
                        '''
                    }
                }	
            }
        }

        stage("Quality Gate"){
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }	
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image = docker.build "${IMAGE_NAME}"
                    }

                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }

        stage("Start Application") {
            steps {
                script {
                    // Start server on port 3001
                    sh 'PORT=3001 forever start app.js'
                    sh 'sleep 5'
                    
                    // Check if server is running on port 3001
                    sh 'ps aux | grep node | grep -v grep || echo "No node processes found"'
                    sh 'netstat -tulpn | grep :3001 || echo "Port 3001 not listening"'
                    sh 'forever list || echo "Forever not available"'
                }
            }
        }
        
        stage("Test Application") {
            steps {
                script {
                    // Test if the application is responding on port 3001
                    sh 'curl -f http://localhost:3001/ || echo "Application not responding on port 3001"'
                    sh 'curl http://localhost:3001/ | head -n 5 || echo "Cannot fetch application content"'
                    
                    // Stop the server after testing
                    sh 'forever stopall'
                }
            }
        }
    }

    post {
        always { 
            script {
                // Stop the server before cleanup
                sh 'forever stopall || echo "No forever processes to stop"'
                sh 'pkill -f "node.*app.js" || echo "No node processes to kill"'
            }
            echo "Build completed - cleaning workspace"
            cleanWs() 
        }
        success { 
            echo "‚úÖ Build completed successfully!" 
        }
        failure { 
            echo "‚ùå Build failed!" 
        }
    }
}

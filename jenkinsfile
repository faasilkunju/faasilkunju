pipeline {
    agent { label 'Jenkins-Agent' }

    stages {
        stage("Cleanup Workspace") {
            steps { 
                cleanWs() 
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'master',
                    credentialsId: 'github',
                    url: 'https://github.com/faasilkunju/faasilkunju.git'
            }
        }

        stage("Verify Environment") {
            steps {
                script {
                    // Verify NodeJS is installed
                    def nodeVersion = sh(script: 'node --version', returnStdout: true).trim()
                    def npmVersion = sh(script: 'npm --version', returnStdout: true).trim()
                    echo "NodeJS version: ${nodeVersion}"
                    echo "NPM version: ${npmVersion}"
                    
                    // Verify we're in the right directory
                    sh 'pwd && ls -la'
                }
            }
        }

        stage("Install Dependencies") {
            steps { 
                sh 'npm install' 
            }
        }

        stage("Install Forever") {
            steps {
                sh 'npm install -g forever'
            }
        }

        stage("Run Tests") {
            steps { 
                sh 'npm test' 
            }
        }

        stage("Build Application") {
            steps { 
                sh 'npm run build || echo "No build script defined - continuing"' 
            }
        }

        stage("Start Application") {
            steps {
                script {
                    // Fix the start_server script first
                    sh '''#!/bin/bash
                        # Create a fixed start_server script
                        cat > scripts/start_server_fixed << 'EOF'
#!/bin/bash
# Start the Node.js application using forever
echo "Starting Node.js application from: $(pwd)"
forever start app.js
echo "Application started with forever"
EOF
                        chmod +x scripts/start_server_fixed
                    '''
                    
                    // Make original scripts executable
                    sh 'chmod +x scripts/start_server || echo "Cannot make original start_server executable"'
                    sh 'ls -la scripts/'
                    
                    // Start server using the fixed script
                    sh './scripts/start_server_fixed'
                    sh 'sleep 5'  // Give server time to start
                    
                    // Check if server is running
                    sh 'ps aux | grep node | grep -v grep || echo "No node processes found"'
                    sh 'netstat -tulpn | grep :3000 || echo "Port 3000 not listening"'
                    sh 'forever list || echo "Forever not available"'
                }
            }
        }
        
        stage("Test Application") {
            steps {
                script {
                    // Test if the application is responding
                    sh 'curl -f http://localhost:3000/ || echo "Application not responding on port 3000"'
                    sh 'curl http://localhost:3000/ | head -n 5 || echo "Cannot fetch application content"'
                }
            }
        }
    }

    post {
        always { 
            script {
                // Stop the server before cleanup
                sh 'forever stopall || echo "No forever processes to stop"'
                sh 'pkill -f "node.*app.js" || echo "No node processes to kill"'
            }
            echo "Build completed - cleaning workspace"
            cleanWs() 
        }
        success { 
            echo "✅ Build completed successfully!" 
        }
        failure { 
            echo "❌ Build failed!" 
        }
    }
}

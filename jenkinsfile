pipeline {
    agent { label 'test-fazil' }
    
    environment {
        APP_NAME = "register-app-pipeline"
        RELEASE = "1.0.0"
        IMAGE_NAME = "fazilkunju/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage("Cleanup Workspace") {
            steps { 
                cleanWs() 
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'master',
                    credentialsId: 'github',
                    url: 'https://github.com/faasilkunju/faasilkunju.git'
            }
        }

        stage("Setup Environment") {
            steps {
                script {
                    sh '''
                        export JAVA_HOME=/usr/lib/jvm/java-21-openjdk
                        export PATH=$JAVA_HOME/bin:$PATH
                        echo "JAVA_HOME set to: $JAVA_HOME"
                        
                        echo "=== Verifying Tools ==="
                        java -version
                        mvn --version || echo "Maven not working - but continuing"
                        node --version
                        npm --version
                        podman --version
                        buildah --version || echo "Buildah not installed"
                    '''
                }
            }
        }

        stage("Verify Environment") {
            steps {
                script {
                    def nodeVersion = sh(script: 'node --version', returnStdout: true).trim()
                    def npmVersion = sh(script: 'npm --version', returnStdout: true).trim()
                    echo "NodeJS version: ${nodeVersion}"
                    echo "NPM version: ${npmVersion}"
                    
                    sh 'pwd && ls -la'
                }
            }
        }

        stage("Install Dependencies") {
            steps { 
                sh 'npm install' 
            }
        }

        stage("Install Forever") {
            steps {
                sh 'npm install -g forever'
            }
        }

        stage("Run Tests") {
            steps { 
                sh 'PORT=3001 npm test'
            }
        }

        stage("Build Application") {
            steps { 
                sh 'npm run build || echo "No build script defined - continuing"' 
            }
        }

        stage("SonarQube Analysis"){
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'Sonarqube') { 
                        sh '''
                            export JAVA_HOME=/usr/lib/jvm/java-21-openjdk
                            export PATH=$JAVA_HOME/bin:$PATH
                            
                            echo "Setting up SonarScanner..."
                            if ! command -v sonar-scanner &> /dev/null; then
                                echo "Installing SonarScanner..."
                                wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
                                unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
                                export PATH=$PWD/sonar-scanner-4.8.0.2856-linux/bin:$PATH
                                echo "SonarScanner installed successfully"
                            else
                                echo "SonarScanner is already installed"
                            fi
                            
                            echo "SonarScanner version:"
                            sonar-scanner --version
                            
                            echo "Starting SonarQube analysis..."
                            sonar-scanner -Dsonar.projectKey=register-app -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.coverage.exclusions=**/node_modules/**,**/tests/** -Dsonar.exclusions=**/node_modules/**,**/.*/** -Dsonar.projectName="Register App" -Dsonar.projectVersion=1.0
                        '''
                    }
                }	
            }
        }

        stage("Quality Gate"){
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }	
            }
        }

        stage("Test Docker Credentials") {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "Testing Docker Hub credentials..."
                            podman login -u $DOCKER_USER -p $DOCKER_PASS docker.io
                            echo "Docker Hub login successful!"
                        '''
                    }
                }
            }
        }

        stage("Build & Push Container Image") {
            steps {
                script {
                    if (fileExists('Dockerfile')) {
                        echo "Building and pushing container image..."
                        
                        withCredentials([usernamePassword(
                            credentialsId: 'dockerhub',
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )]) {
                            sh """
                                rm -f /root/.docker/config.json
                                rm -f /run/user/0/containers/auth.json
                                
                                podman login -u '$DOCKER_USER' -p '$DOCKER_PASS' docker.io
                                
                                echo "Building image: docker.io/${IMAGE_NAME}:${IMAGE_TAG}"
                                podman build -t docker.io/${IMAGE_NAME}:${IMAGE_TAG} .
                                
                                echo "Pushing version tag: ${IMAGE_TAG}"
                                podman push docker.io/${IMAGE_NAME}:${IMAGE_TAG}
                                
                                podman login -u '$DOCKER_USER' -p '$DOCKER_PASS' docker.io
                                
                                podman tag docker.io/${IMAGE_NAME}:${IMAGE_TAG} docker.io/${IMAGE_NAME}:latest
                                echo "Pushing latest tag"
                                podman push docker.io/${IMAGE_NAME}:latest
                                
                                echo "All container images pushed successfully to Docker Hub"
                            """
                        }
                    } else {
                        echo "No Dockerfile found - skipping container build stage"
                        sh 'pwd && ls -la'
                    }
                }
            }
        }

        stage("Verify Push Success") {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'dockerhub',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "Verifying images were pushed successfully..."
                            podman login -u $DOCKER_USER -p $DOCKER_PASS docker.io
                            podman pull docker.io/${IMAGE_NAME}:${IMAGE_TAG}
                            podman pull docker.io/${IMAGE_NAME}:latest
                            echo "Images verified and can be pulled successfully"
                        '''
                    }
                }
            }
        }

        stage("Trivy Security Scan") {
            steps {
                script {
                    if (fileExists('Dockerfile')) {
                        echo "Running Trivy security scan..."
                        sh """
                            podman run --security-opt label=disable aquasec/trivy image docker.io/${IMAGE_NAME}:latest --no-progress --scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table
                        """
                        echo "Trivy security scan completed"
                    } else {
                        echo "No container image available - skipping Trivy scan"
                    }
                }
            }
        }

        stage("Cleanup Artifacts") {
            steps {
                script {
                    if (fileExists('Dockerfile')) {
                        echo "Cleaning up container artifacts..."
                        sh """
                            podman rmi docker.io/${IMAGE_NAME}:${IMAGE_TAG} || echo "Version image not found"
                            podman rmi docker.io/${IMAGE_NAME}:latest || echo "Latest image not found"
                            podman system prune -f || echo "No pruning needed"
                        """
                        echo "Container artifacts cleaned up"
                    } else {
                        echo "No container artifacts to clean up"
                    }
                }
            }
        }

        stage("Start Application") {
            steps {
                script {
                    echo "Starting application..."
                    sh 'forever stopall || echo "No previous instances running"'
                    sh 'pkill -f "node.*app.js" || echo "No node processes to kill"'
                    
                    sh 'PORT=3001 forever start app.js'
                    sh 'sleep 10'
                    
                    sh '''
                        echo "Checking application status"
                        ps aux | grep node | grep -v grep || echo "No node processes found"
                        netstat -tulpn | grep :3001 || echo "Port 3001 not listening"
                        forever list || echo "Forever not available"
                    '''
                }
            }
        }
        
        stage("Test Application") {
            steps {
                script {
                    echo "Testing application..."
                    sh '''
                        echo "Testing application endpoint..."
                        curl -f http://localhost:3001/ && echo "Application is responding" || echo "Application not responding on port 3001"
                        
                        echo "Testing application content..."
                        curl -s http://localhost:3001/ | head -n 5 || echo "Cannot fetch application content"
                    '''
                }
            }
        }
    }

    post {
        always { 
            script {
                echo "Stopping application..."
                sh 'forever stopall || echo "No forever processes to stop"'
                sh 'pkill -f "node.*app.js" || echo "No node processes to kill"'
                sh 'podman system prune -f || echo "No podman cleanup needed"'
            }
            echo "Build process completed - cleaning workspace"
            cleanWs() 
        }
        success { 
            echo "Build completed successfully!" 
            script {
                sh '''
                    echo "Build Summary"
                    echo "Docker Image: docker.io/${IMAGE_NAME}:${IMAGE_TAG}"
                    echo "Docker Image: docker.io/${IMAGE_NAME}:latest"
                    echo "Build Number: ${BUILD_NUMBER}"
                '''
            }
        }
        failure { 
            echo "Build failed!" 
            script {
                sh '''
                    echo "Troubleshooting Info"
                    echo "Check Docker Hub: https://hub.docker.com/r/fazilkunju/register-app-pipeline"
                    echo "Check Jenkins logs for detailed error information"
                '''
            }
        }
    }
}

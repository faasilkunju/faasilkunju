pipeline {
    agent { label 'test-fazil' }
    
    environment {
        APP_NAME = "register-app-pipeline"
        RELEASE = "1.0.0"
        IMAGE_NAME = "fazilkunju/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage("Cleanup Workspace") {
            steps { 
                cleanWs() 
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'master',
                    credentialsId: 'github',
                    url: 'https://github.com/faasilkunju/faasilkunju.git'
            }
        }

        stage("Install Skopeo") {
            steps {
                script {
                    sh '''
                        echo "Installing Skopeo..."
                        dnf install -y skopeo
                        skopeo --version
                    '''
                }
            }
        }

        stage("Setup Environment") {
            steps {
                script {
                    sh '''
                        echo "=== Verifying Tools ==="
                        java -version || echo "Java not available"
                        node --version
                        npm --version
                        podman --version
                        skopeo --version
                    '''
                }
            }
        }

        stage("Install Dependencies") {
            steps { 
                sh 'npm install' 
            }
        }

        stage("Run Tests") {
            steps { 
                sh 'PORT=3001 npm test' 
            }
        }

        stage("Build & Push Container Image") {
            steps {
                script {
                    if (fileExists('Dockerfile')) {
                        echo "üöÄ Building and pushing Docker image using Skopeo..."
                        
                        withCredentials([usernamePassword(
                            credentialsId: 'docker',
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )]) {
                            sh """
                                # Build with Podman using local tag
                                echo "üèóÔ∏è Building image..."
                                podman build -t local-register-app:${IMAGE_TAG} .
                                
                                # Push using Skopeo (better authentication handling)
                                echo "üì§ Pushing to Docker Hub using Skopeo..."
                                skopeo copy --dest-creds '$DOCKER_USER:$DOCKER_PASS' \\
                                    containers-storage:localhost/local-register-app:${IMAGE_TAG} \\
                                    docker://docker.io/${IMAGE_NAME}:${IMAGE_TAG}
                                
                                echo "‚úÖ Successfully pushed: docker.io/${IMAGE_NAME}:${IMAGE_TAG}"
                            """
                        }
                    } else {
                        echo "‚ùå No Dockerfile found!"
                        sh 'pwd && ls -la'
                    }
                }
            }
        }

        stage("Verify Push") {
            steps {
                script {
                    echo "üîç Verifying push was successful..."
                    withCredentials([usernamePassword(
                        credentialsId: 'docker',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            podman login -u $DOCKER_USER -p $DOCKER_PASS docker.io
                            podman pull docker.io/${IMAGE_NAME}:${IMAGE_TAG}
                            echo "‚úÖ Verification successful - image can be pulled!"
                        '''
                    }
                }
            }
        }

        stage("Start Application") {
            steps {
                script {
                    echo "üöÄ Starting application..."
                    sh 'forever stopall || echo "No previous instances to stop"'
                    sh 'pkill -f "node.*app.js" || echo "No node processes to kill"'
                    
                    sh 'PORT=3001 forever start app.js'
                    sh 'sleep 8'
                    
                    sh '''
                        echo "üìä Checking application status..."
                        ps aux | grep node | grep -v grep | head -5
                        netstat -tulpn | grep :3001 || echo "Port 3001 not listening yet"
                        curl -s http://localhost:3001/ | head -3 && echo "‚úÖ Application is responding!" || echo "‚ùå Application not responding"
                    '''
                }
            }
        }
    }

    post {
        always { 
            script {
                echo "üßπ Cleaning up..."
                sh 'forever stopall || echo "No forever processes to stop"'
                sh 'pkill -f "node.*app.js" || echo "No node processes to kill"'
                sh 'podman rmi local-register-app:${IMAGE_TAG} || echo "Local image not found"'
            }
            cleanWs() 
        }
        success { 
            echo "üéâ PIPELINE SUCCESSFUL!" 
        }
        failure { 
            echo "üí• PIPELINE FAILED!" 
        }
    }
}

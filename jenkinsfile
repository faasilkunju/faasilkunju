pipeline {
    agent { label 'test-fazil' }

    stages {
        stage("Cleanup Workspace") {
            steps { 
                cleanWs() 
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'master',
                    credentialsId: 'github',
                    url: 'https://github.com/faasilkunju/faasilkunju.git'
            }
        }

        stage("Check Tools Availability") {
            steps {
                script {
                    echo "üîç Checking available tools on the agent..."
                    
                    // Check if Maven is installed
                    def mavenInstalled = false
                    try {
                        def mavenVersion = sh(script: 'mvn --version', returnStdout: true).trim()
                        echo "‚úÖ Maven is installed: ${mavenVersion}"
                        mavenInstalled = true
                    } catch (Exception e) {
                        echo "‚ùå Maven is NOT installed"
                    }
                    
                    // Check if SonarScanner is installed
                    def sonarScannerInstalled = false
                    try {
                        def scannerVersion = sh(script: 'sonar-scanner --version', returnStdout: true).trim()
                        echo "‚úÖ SonarScanner is installed: ${scannerVersion}"
                        sonarScannerInstalled = true
                    } catch (Exception e) {
                        echo "‚ùå SonarScanner is NOT installed"
                    }
                    
                    // Store the results for later stages
                    env.MAVEN_AVAILABLE = mavenInstalled.toString()
                    env.SONARSCANNER_AVAILABLE = sonarScannerInstalled.toString()
                    
                    // Diagnostic info
                    sh '''
                        echo "=== Tool Locations ==="
                        which mvn || echo "mvn: not found"
                        which sonar-scanner || echo "sonar-scanner: not found"
                        which npm || echo "npm: not found"
                        which node || echo "node: not found"
                        echo "=== Java Info ==="
                        java -version 2>&1 | head -3 || echo "java: not found"
                    '''
                }
            }
        }

        stage("Verify Environment") {
            steps {
                script {
                    // Verify NodeJS is installed
                    def nodeVersion = sh(script: 'node --version', returnStdout: true).trim()
                    def npmVersion = sh(script: 'npm --version', returnStdout: true).trim()
                    echo "NodeJS version: ${nodeVersion}"
                    echo "NPM version: ${npmVersion}"
                    
                    // Verify we're in the right directory
                    sh 'pwd && ls -la'
                }
            }
        }

        stage("Install Dependencies") {
            steps { 
                sh 'npm install' 
            }
        }

        stage("Install Forever") {
            steps {
                sh 'npm install -g forever'
            }
        }

        stage("Run Tests") {
            steps { 
                sh 'PORT=3001 npm test'
            }
        }

        stage("Build Application") {
            steps { 
                sh 'npm run build || echo "No build script defined - continuing"' 
            }
        }

        stage("SonarQube Analysis"){
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'Sonarqube') { 
                        sh "mvn sonar:sonar"
                    }
                }	
            }
        }

        stage("Start Application") {
            steps {
                script {
                    // Start server on port 3001
                    sh 'PORT=3001 forever start app.js'
                    sh 'sleep 5'
                    
                    // Check if server is running on port 3001
                    sh 'ps aux | grep node | grep -v grep || echo "No node processes found"'
                    sh 'netstat -tulpn | grep :3001 || echo "Port 3001 not listening"'
                    sh 'forever list || echo "Forever not available"'
                }
            }
        }
        
        stage("Test Application") {
            steps {
                script {
                    // Test if the application is responding on port 3001
                    sh 'curl -f http://localhost:3001/ || echo "Application not responding on port 3001"'
                    sh 'curl http://localhost:3001/ | head -n 5 || echo "Cannot fetch application content"'
                    
                    // Stop the server after testing
                    sh 'forever stopall'
                }
            }
        }
    }

    post {
        always { 
            script {
                // Stop the server before cleanup
                sh 'forever stopall || echo "No forever processes to stop"'
                sh 'pkill -f "node.*app.js" || echo "No node processes to kill"'
            }
            echo "Build completed - cleaning workspace"
            cleanWs() 
        }
        success { 
            echo "‚úÖ Build completed successfully!" 
        }
        failure { 
            echo "‚ùå Build failed!" 
        }
    }
}
